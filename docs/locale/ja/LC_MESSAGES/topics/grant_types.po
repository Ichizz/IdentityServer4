# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Brock Allen & Dominick Baier
# This file is distributed under the same license as the IdentityServer4
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IdentityServer4 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-04 15:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../topics/grant_types.rst:2
msgid "Grant Types"
msgstr ""

#: ../../topics/grant_types.rst:4
msgid ""
"Grant types are a way to specify how a client wants to interact with "
"IdentityServer. The OpenID Connect and OAuth 2 specs define the following"
" grant types:"
msgstr ""

#: ../../topics/grant_types.rst:7 ../../topics/grant_types.rst:63
msgid "Implicit"
msgstr ""

#: ../../topics/grant_types.rst:8 ../../topics/grant_types.rst:73
msgid "Authorization code"
msgstr ""

#: ../../topics/grant_types.rst:9 ../../topics/grant_types.rst:82
msgid "Hybrid"
msgstr ""

#: ../../topics/grant_types.rst:10 ../../topics/grant_types.rst:41
msgid "Client credentials"
msgstr ""

#: ../../topics/grant_types.rst:11 ../../topics/grant_types.rst:51
msgid "Resource owner password"
msgstr ""

#: ../../topics/grant_types.rst:12 ../../topics/grant_types.rst:95
msgid "Refresh tokens"
msgstr ""

#: ../../topics/grant_types.rst:13 ../../topics/grant_types.rst:108
msgid "Extension grants"
msgstr ""

#: ../../topics/grant_types.rst:15
msgid ""
"You can specify which grant type a client can use via the "
"``AllowedGrantTypes`` property on the ``Client`` configuration."
msgstr ""

#: ../../topics/grant_types.rst:17
msgid ""
"A client can be configured to use more than a single grant type (e.g. "
"Hybrid for user centric operations and client credentials for server to "
"server communication). The ``GrantTypes`` class can be used to pick from "
"typical grant type combinations::"
msgstr ""

#: ../../topics/grant_types.rst:22
msgid "You can also specify the grant types list manually::"
msgstr ""

#: ../../topics/grant_types.rst:31
msgid ""
"If you want to transmit access tokens via the browser channel, you also "
"need to allow that explicitly on the client configuration::"
msgstr ""

#: ../../topics/grant_types.rst:35
msgid ""
"For security reasons, not all grant type combinations are allowed. See "
"below for more details."
msgstr ""

#: ../../topics/grant_types.rst:37
msgid ""
"For the remainder, the grant types are briefly described, and when you "
"would use them. It is also recommended, that in addition you read the "
"corresponding specs to get a better understanding of the differences."
msgstr ""

#: ../../topics/grant_types.rst:42
msgid ""
"This is the simplest grant type and is used for server to server "
"communication - tokens are always requested on behalf of a client, not a "
"user."
msgstr ""

#: ../../topics/grant_types.rst:44
msgid ""
"With this grant type you send a token request to the token endpoint, and "
"get an access token back that represents the client. The client typically"
" has to authenticate with the token endpoint using its client ID and "
"secret."
msgstr ""

#: ../../topics/grant_types.rst:47
msgid ""
"See the :ref:`Client Credentials Quick Start "
"<refClientCredentialsQuickstart>` for a sample how to use it."
msgstr ""

#: ../../topics/grant_types.rst:52
msgid ""
"The resource owner password grant type allows to request tokens on behalf"
" of a user by sending the user's name and password to the token endpoint."
" This is so called \"non-interactive\" authentication and is generally "
"not recommended."
msgstr ""

#: ../../topics/grant_types.rst:55
msgid ""
"There might be reasons for certain legacy or first-party integration "
"scenarios, where this grant type is useful, but the general "
"recommendation is to use an interactive flow like implicit or hybrid for "
"user authentication instead."
msgstr ""

#: ../../topics/grant_types.rst:58
msgid ""
"See the :ref:`Resource Owner Password Quick Start "
"<_refResourceOwnerQuickstart>` for a sample how to use it. You also need "
"to provide code for the username/password validation which can be "
"supplied by implementing the ``IResourceOwnerPasswordValidator`` "
"interface. You can find more information about this interface :ref:`here "
"<refResourceOwnerPasswordValidator>`."
msgstr ""

#: ../../topics/grant_types.rst:64
msgid ""
"The implicit grant type is optimized for browser-based applications. "
"Either for user authentication-only (both server-side and JavaScript "
"applications), or authentication and access token requests (JavaScript "
"applications)."
msgstr ""

#: ../../topics/grant_types.rst:67
msgid ""
"In the implicit flow, all tokens are transmitted via the browser, and "
"advanced features like refresh tokens are thus not allowed."
msgstr ""

#: ../../topics/grant_types.rst:69
msgid ""
":ref:`This <refImplicitQuickstart>` quickstart shows authentication for "
"service-side web apps, and :ref:`this <refJavaScriptQuickstart>` shows "
"JavaScript."
msgstr ""

#: ../../topics/grant_types.rst:74
msgid ""
"Authorization code flow was originally specified by OAuth 2, and provides"
" a way to retrieve tokens on a back-channel as opposed to the browser "
"front-channel. It also support client authentication."
msgstr ""

#: ../../topics/grant_types.rst:77
msgid ""
"While this grant type is supported on its own, it is generally "
"recommended you combine that with identity tokens which turns it into the"
" so called hybrid flow. Hybrid flow gives you important extra features "
"like signed protocol responses."
msgstr ""

#: ../../topics/grant_types.rst:83
msgid ""
"Hybrid flow is a combination of the implicit and authorization code flow "
"- it uses combinations of multiple grant types, most typically ``code "
"id_token``."
msgstr ""

#: ../../topics/grant_types.rst:85
msgid ""
"In hybrid flow the identity token is transmitted via the browser channel "
"and contains the signed protocol response along with signatures for other"
" artifacts like the authorization code. This mitigates a number of "
"attacks that apply to the browser channel. After successful validation of"
" the response, the back-channel is used to retrieve the access and "
"refresh token."
msgstr ""

#: ../../topics/grant_types.rst:89
msgid ""
"This is the recommended flow for native applications that want to "
"retrieve access tokens (and possibly refresh tokens as well) and is used "
"for server-side web applications and native desktop/mobile applications."
msgstr ""

#: ../../topics/grant_types.rst:92
msgid ""
"See :ref:`this <refHybridQuickstart>` quickstart for more information "
"about using hybrid flow with MVC."
msgstr ""

#: ../../topics/grant_types.rst:96
msgid "Refresh tokens allow gaining long lived access to APIs."
msgstr ""

#: ../../topics/grant_types.rst:98
msgid ""
"You typically want to keep the lifetime of access tokens as short as "
"possible, but at the same time don't want to bother the user over and "
"over again with doing a front-channel roundtrips to IdentityServer for "
"requesting new ones."
msgstr ""

#: ../../topics/grant_types.rst:101
msgid ""
"Refresh tokens allow requesting new access tokens without user "
"interaction. Every time the client refreshes a token it needs to make an "
"(authenticated) back-channel call to IdentityServer. This allows checking"
" if the refresh token is still valid, or has been revoked in the "
"meantime."
msgstr ""

#: ../../topics/grant_types.rst:104
msgid ""
"Refresh tokens are supported in hybrid, authorization code and resource "
"owner password flows. To request a refresh token, the client needs to "
"include the ``offline_access`` scope in the token request (and must be "
"authorized to request for that scope)."
msgstr ""

#: ../../topics/grant_types.rst:109
msgid ""
"Extension grants allow extending the token endpoint with new grant types."
" See :ref:`this <refExtensionGrants>` for more details."
msgstr ""

#: ../../topics/grant_types.rst:112
msgid "Incompatible grant types"
msgstr ""

#: ../../topics/grant_types.rst:113
msgid "Some grant type combinations are forbidden:"
msgstr ""

#: ../../topics/grant_types.rst:115
msgid ""
"Mixing implicit and authorization code or hybrid would allow a downgrade "
"attack from the more secure code based flow to implicit."
msgstr ""

#: ../../topics/grant_types.rst:116
msgid "Same concern exists for allowing both authorization code and hybrid"
msgstr ""

