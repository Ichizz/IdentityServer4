# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Brock Allen & Dominick Baier
# This file is distributed under the same license as the IdentityServer4
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
msgid ""
msgstr ""
"Project-Id-Version: IdentityServer4 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-04 15:21+0900\n"
"PO-Revision-Date: 2018-11-17 19:10+0900\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja_JP\n"
"X-Generator: Poedit 2.2\n"

#: ../../topics/cors.rst:4
msgid "CORS"
msgstr ""

#: ../../topics/cors.rst:6
msgid ""
"Many endpoints in IdentityServer will be accessed via Ajax calls from "
"JavaScript-based clients. Given that IdentityServer will most likely be "
"hosted on a different origin than these clients, this implies that `Cross-"
"Origin Resource Sharing <http://www.html5rocks.com/en/tutorials/cors/>`_ "
"(CORS) will need to be configured."
msgstr ""
"IdentityServerの多くのエンドポイントは、JavaScriptベースのクライアントから"
"のAjax呼び出しを介してアクセスされます。IdentityServerは、これらのクライア"
"ントとは異なる起点でホストされる可能性が高いため、CORS（Cross-Origin "
"Resource Sharing）を設定する必要があります。"

#: ../../topics/cors.rst:10
msgid "Client-based CORS Configuration"
msgstr "クライアントベースのCORS設定"

#: ../../topics/cors.rst:12
msgid ""
"One approach to configuring CORS is to use the ``AllowedCorsOrigins`` "
"collection on the :ref:`client configuration <refClient>`. Simply add the "
"origin of the client to the collection and the default configuration in "
"IdentityServer will consult these values to allow cross-origin calls from "
"the origins."
msgstr ""
"CORSを構成する1つの方法はAllowedCorsOrigins、クライアント構成上でコレクショ"
"ンを使用することです。クライアントの起点をコレクションに追加するだけで、"
"IdentityServerのデフォルト設定ではこれらの値を参照し、起点からのクロスオリ"
"ジンコールを許可します。"

#: ../../topics/cors.rst:15
msgid ""
"Be sure to use an origin (not a URL) when configuring CORS. For example: "
"``https://foo:123/`` is a URL, whereas ``https://foo:123`` is an origin."
msgstr ""
"CORSを設定するときは、必ずオリジン（URLではなく）を使用してください。例え"
"ば、：https://foo:123/はhttps://foo:123原点であるが、URLである。"

#: ../../topics/cors.rst:17
msgid ""
"This default CORS implementation will be in use if you are using either "
"the \"in-memory\" or EF-based client configuration that we provide. If you "
"define your own ``IClientStore``, then you will need to implement your own "
"custom CORS policy service (see below)."
msgstr ""
"このデフォルトのCORS実装は、私たちが提供する「メモリ内」またはEFベースのク"
"ライアント構成を使用している場合に使用されます。自分自身を定義する場合は"
"IClientStore、独自のカスタムCORSポリシーサービスを実装する必要があります"
"（下記参照）。"

#: ../../topics/cors.rst:21
msgid "Custom Cors Policy Service"
msgstr "カスタムCORSポリシーサービス"

#: ../../topics/cors.rst:23
msgid ""
"IdentityServer allows the hosting application to implement the "
"``ICorsPolicyService`` to completely control the CORS policy."
msgstr ""
"IdentityServerを使用すると、ホスティングアプリケーションICorsPolicyService"
"はCORSポリシーを完全に制御することができます。"

#: ../../topics/cors.rst:25
msgid ""
"The single method to implement is: ``Task<bool> "
"IsOriginAllowedAsync(string origin)``. Return ``true`` if the `origin` is "
"allowed, ``false`` otherwise."
msgstr ""
"実装する単一の方法は以下の通りです：。原点が許可されていれば返し、そうでな"
"ければ返します。Task<bool> IsOriginAllowedAsync(string origin)truefalse"

#: ../../topics/cors.rst:28
msgid ""
"Once implemented, simply register the implementation in DI and "
"IdentityServer will then use your custom implementation."
msgstr ""
"実装したら、実装をDIに登録するだけで、IdentityServerはカスタム実装を使用し"
"ます。"

#: ../../topics/cors.rst:30
msgid "**DefaultCorsPolicyService**"
msgstr ""

#: ../../topics/cors.rst:32
msgid ""
"If you simply wish to hard-code a set of allowed origins, then there is a "
"pre-built ``ICorsPolicyService`` implementation you can use called "
"``DefaultCorsPolicyService``. This would be configured as a singleton in "
"DI, and hard-coded with its ``AllowedOrigins`` collection, or setting the "
"flag ``AllowAll`` to ``true`` to allow all origins. For example, in "
"``ConfigureServices``::"
msgstr ""
"許可された起点のセットを単純にハードコーディングしたいのであれば、"
"ICorsPolicyServiceあなたが呼び出すことができる予めビルドされた実装がありま"
"すDefaultCorsPolicyService。これは、DI内のシングルトンとして構成され、その"
"AllowedOriginsコレクションでハードコードされるか、フラグAllowAllをtrueすべ"
"ての起点を許可するように設定します。たとえば、次のようになり"
"ConfigureServicesます。"

#: ../../topics/cors.rst:42
msgid "Use ``AllowAll`` with caution."
msgstr "AllowAll慎重に使用してください。"

#: ../../topics/cors.rst:46
msgid "Mixing IdentityServer's CORS policy with ASP.NET Core's CORS policies"
msgstr "IdentityServerのCORSポリシーとASP.NET CoreのCORSポリシーを"

#: ../../topics/cors.rst:48
msgid ""
"IdentityServer uses the CORS middleware from ASP.NET Core to provide its "
"CORS implementation. It is possible that your application that hosts "
"IdentityServer might also require CORS for its own custom endpoints. In "
"general, both should work together in the same application."
msgstr ""
"IdentityServerは、ASP.NET CoreのCORSミドルウェアを使用してCORSの実装を提供"
"します。IdentityServerをホストするアプリケーションで独自のカスタムエンドポ"
"イント用のCORSが必要な場合もあります。一般的には、両方とも同じアプリケー"
"ションで連携する必要があります。"

#: ../../topics/cors.rst:52
msgid ""
"Your code should use the documented CORS features from ASP.NET Core "
"without regard to IdentityServer. This means you should define policies "
"and register the middleware as normal. If your application defines "
"policies in ``ConfigureServices``, then those should continue to work in "
"the same places you are using them (either where you configure the CORS "
"middleware or where you use the MVC ``EnableCors`` attributes in your "
"controller code). If instead you define an inline policy in the use of the "
"CORS middleware (via the policy builder callback), then that too should "
"continue to work normally."
msgstr ""
"コードでは、IdentityServerに関係なく、ASP.NET Coreの文書化されたCORS機能を"
"使用する必要があります。つまり、ポリシーを定義し、ミドルウェアを通常どおり"
"登録する必要があります。アプリケーションがポリシーを定義ConfigureServicesし"
"ている場合は、CORSミドルウェアを構成する場所またはEnableCorsコントローラ"
"コードでMVC 属性を使用する場所と同じ場所で引き続き作業する必要があります。"
"代わりにCORSミドルウェアを使用して（ポリシービルダーのコールバック経由で）"
"インラインポリシーを定義すると、それも正常に機能し続けるはずです。"

#: ../../topics/cors.rst:57
msgid ""
"The one scenario where there might be a conflict between your use of the "
"ASP.NET Core CORS services and IdentityServer is if you decide to create a "
"custom ``ICorsPolicyProvider``. Given the design of the ASP.NET Core's "
"CORS services and middleware, IdentityServer implements its own custom "
"``ICorsPolicyProvider`` and registers it in the DI system. Fortunately, "
"the IdentityServer implementation is designed to use the decorator pattern "
"to wrap any existing  ``ICorsPolicyProvider`` that is already registered "
"in DI. What this means is that you can also implement the "
"``ICorsPolicyProvider``, but it simply needs to be registered prior to "
"IdentityServer in DI (e.g. in ``ConfigureServices``)."
msgstr ""
"ASP.NET Core CORSサービスとIdentityServerの使用が競合するシナリオの1つは、"
"カスタムを作成する場合ですICorsPolicyProvider。ASP.NET CoreのCORSサービスと"
"ミドルウェアが設計されているため、IdentityServerは独自のカスタム"
"ICorsPolicyProviderを実装し、DIシステムに登録します。幸いにも、"
"IdentityServerの実装はICorsPolicyProvider、DIに既に登録されている既存のもの"
"をラップするためにデコレータパターンを使用するように設計されています 。つま"
"りICorsPolicyProvider、実装することもできますが、IdentityServerの前にDIで登"
"録する必要があります（例：in ConfigureServices）。"
