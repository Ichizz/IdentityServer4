# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Brock Allen & Dominick Baier
# This file is distributed under the same license as the IdentityServer4
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IdentityServer4 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-04 15:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../quickstarts/2_resource_owner_passwords.rst:4
msgid "Protecting an API using Passwords"
msgstr ""

#: ../../quickstarts/2_resource_owner_passwords.rst:6
msgid ""
"The OAuth 2.0 resource owner password grant allows a client to send "
"username and password to the token service and get an access token back "
"that represents that user."
msgstr ""

#: ../../quickstarts/2_resource_owner_passwords.rst:9
msgid ""
"The spec recommends using the resource owner password grant only for "
"\"trusted\" (or legacy) applications. Generally speaking you are "
"typically far better off using one of the interactive OpenID Connect "
"flows when you want to authenticate a user and request access tokens."
msgstr ""

#: ../../quickstarts/2_resource_owner_passwords.rst:13
msgid ""
"Nevertheless, this grant type allows us to introduce the concept of users"
" to our quickstart IdentityServer, and that's why we show it."
msgstr ""

#: ../../quickstarts/2_resource_owner_passwords.rst:17
msgid "Adding users"
msgstr ""

#: ../../quickstarts/2_resource_owner_passwords.rst:18
msgid ""
"Just like there are in-memory stores for resources (aka scopes) and "
"clients, there is also one for users."
msgstr ""

#: ../../quickstarts/2_resource_owner_passwords.rst:20
msgid ""
"Check the ASP.NET Identity based quickstarts for more information on how "
"to properly store and manage user accounts."
msgstr ""

#: ../../quickstarts/2_resource_owner_passwords.rst:22
msgid ""
"The class ``TestUser`` represents a test user and its claims. Let's "
"create a couple of users by adding the following code to our config "
"class:"
msgstr ""

#: ../../quickstarts/2_resource_owner_passwords.rst:25
msgid "First add the following using statement to the ``Config.cs`` file::"
msgstr ""

#: ../../quickstarts/2_resource_owner_passwords.rst:48
msgid "Then register the test users with IdentityServer::"
msgstr ""

#: ../../quickstarts/2_resource_owner_passwords.rst:60
msgid ""
"The ``AddTestUsers`` extension method does a couple of things under the "
"hood"
msgstr ""

#: ../../quickstarts/2_resource_owner_passwords.rst:62
msgid "adds support for the resource owner password grant"
msgstr ""

#: ../../quickstarts/2_resource_owner_passwords.rst:63
msgid ""
"adds support to user related services typically used by a login UI (we'll"
" use that in the next quickstart)"
msgstr ""

#: ../../quickstarts/2_resource_owner_passwords.rst:64
msgid ""
"adds support for a profile service based on the test users (you'll learn "
"more about that in the next quickstart)"
msgstr ""

#: ../../quickstarts/2_resource_owner_passwords.rst:67
msgid "Adding a client for the resource owner password grant"
msgstr ""

#: ../../quickstarts/2_resource_owner_passwords.rst:68
msgid ""
"You could simply add support for the grant type to our existing client by"
" changing the ``AllowedGrantTypes`` property. If you need your client to "
"be able to use both grant types that is absolutely supported."
msgstr ""

#: ../../quickstarts/2_resource_owner_passwords.rst:72
msgid ""
"Typically you want to create a separate client for the resource owner use"
" case, add the following to your clients configuration::"
msgstr ""

#: ../../quickstarts/2_resource_owner_passwords.rst:97
msgid "Requesting a token using the password grant"
msgstr ""

#: ../../quickstarts/2_resource_owner_passwords.rst:98
msgid ""
"The client looks very similar to what we did for the client credentials "
"grant. The main difference is now that the client would collect the "
"user's password somehow, and send it to the token service during the "
"token request."
msgstr ""

#: ../../quickstarts/2_resource_owner_passwords.rst:102
msgid "Again IdentityModel's ``TokenClient`` can help out here::"
msgstr ""

#: ../../quickstarts/2_resource_owner_passwords.rst:117
msgid ""
"When you send the token to the identity API endpoint, you will notice one"
" small but important difference compared to the client credentials grant."
" The access token will now contain a ``sub`` claim which uniquely "
"identifies the user. This \"sub\" claim can be seen by examining the "
"content variable after the call to the API and also will be displayed on "
"the screen by the console application."
msgstr ""

#: ../../quickstarts/2_resource_owner_passwords.rst:121
msgid ""
"The presence (or absence) of the ``sub`` claim lets the API distinguish "
"between calls on behalf of clients and calls on behalf of users."
msgstr ""

