# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Brock Allen & Dominick Baier
# This file is distributed under the same license as the IdentityServer4
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
msgid ""
msgstr ""
"Project-Id-Version: IdentityServer4 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-04 15:21+0900\n"
"PO-Revision-Date: 2018-11-17 07:37+0900\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja_JP\n"
"X-Generator: Poedit 2.2\n"

#: ../../quickstarts/4_external_authentication.rst:4
msgid "Adding Support for External Authentication"
msgstr "外部認証のサポートの追加"

#: ../../quickstarts/4_external_authentication.rst:6
msgid ""
"Next we will add support for external authentication. This is really "
"easy, because all you really need is an ASP.NET Core compatible "
"authentication handler."
msgstr ""
"次に、外部認証のサポートを追加します。これは本当に簡単です。本当に必要な"
"のはASP.NET Core互換の認証ハンドラです。"

#: ../../quickstarts/4_external_authentication.rst:9
msgid ""
"ASP.NET Core itself ships with support for Google, Facebook, Twitter, "
"Microsoft Account and OpenID Connect. In addition you can find "
"implementations for many other authentication providers `here <https://"
"github.com/aspnet-contrib/AspNet.Security.OAuth.Providers>`_."
msgstr ""
"ASP.NET Core自体は、Google、Facebook、Twitter、Microsoft Account、OpenID "
"Connectをサポートしています。さらに、他の多くの認証プロバイダの実装をここ"
"で見つけることができます。"

#: ../../quickstarts/4_external_authentication.rst:13
msgid "Adding Google support"
msgstr "Googleサポートを追加する"

#: ../../quickstarts/4_external_authentication.rst:14
msgid ""
"To be able to use Google for authentication, you first need to register "
"with them. This is done at their developer `console <https://console."
"developers.google.com/>`_. Create a new project, enable the Google+ API "
"and configure the callback address of your local IdentityServer by "
"adding the */signin-google* path to your base-address (e.g. http://"
"localhost:5000/signin-google)."
msgstr ""
"認証にGoogleを使用できるようにするには、まずGoogleに登録する必要がありま"
"す。これは開発者コンソールで行われます。新しいプロジェクトを作成し、"
"Google+ APIを有効にして、/ signin-googleのパスをベースアドレス（http：// "
"localhost：5000 / signin-googleなど）に追加してローカルIdentityServerの"
"コールバックアドレスを設定します。"

#: ../../quickstarts/4_external_authentication.rst:19
msgid ""
"If you are running on port 5000 - you can simply use the client id/"
"secret from the code snippet below, since this is pre-registered by us."
msgstr ""
"ポート5000で実行している場合は、下記のコードスニペットのクライアントID /"
"シークレットを使用することができます。これは、事前に登録されているためで"
"す。"

#: ../../quickstarts/4_external_authentication.rst:22
msgid ""
"Start by adding the Google authentication handler to DI. This is done by "
"adding this snippet to ``ConfigureServices`` in ``Startup``::"
msgstr ""
"まず、DIにGoogle認証ハンドラを追加します。これは、このスニペットを次の場"
"所ConfigureServicesに追加することで行いますStartup："

#: ../../quickstarts/4_external_authentication.rst:47
msgid ""
"By default, IdentityServer configures a cookie handler specifically for "
"the results of external authentication (with the scheme based on the "
"constant ``IdentityServerConstants."
"ExternalCookieAuthenticationScheme``). The configuration for the Google "
"handler is then using that cookie handler. For a better understanding of "
"how this is done, see the ``AccountController`` class under the "
"`Quickstart` folder."
msgstr ""
"デフォルトでは、IdentityServerは、外部認証の結果（定数に基づくスキームを"
"使用IdentityServerConstants.ExternalCookieAuthenticationScheme）のために"
"特にCookieハンドラを構成します。Googleハンドラの設定では、そのCookieハン"
"ドラが使用されます。これがどのように行われたかをよりよく理解するには"
"AccountController、クイックスタートフォルダの下にあるクラスを参照してくだ"
"さい。"

#: ../../quickstarts/4_external_authentication.rst:51
msgid ""
"Now run the MVC client and try to authenticate - you will see a Google "
"button on the login page:"
msgstr ""
"次に、MVCクライアントを実行して認証を試みます。ログインページにGoogleのボ"
"タンが表示されます："

#: ../../quickstarts/4_external_authentication.rst:55
msgid ""
"After authentication, you can see that the claims are now being sourced "
"from Google data."
msgstr ""
"認証後、クレームが現在Googleデータから取得されていることがわかります。"

#: ../../quickstarts/4_external_authentication.rst:60
msgid "Further experiments"
msgstr "さらなる実験"

#: ../../quickstarts/4_external_authentication.rst:61
msgid ""
"You can add an additional external provider. We have a `cloud-hosted "
"demo <https://demo.identityserver.io>`_ version of IdentityServer4 which "
"you can integrate using OpenID Connect."
msgstr ""
"追加の外部プロバイダを追加できます。私たちはあなたがOpenID Connectを使っ"
"て統合できるIdentityServer4のクラウドホストデモ版を持っています。"

#: ../../quickstarts/4_external_authentication.rst:64
msgid "Add the OpenId Connect handler to DI::"
msgstr "DIにOpenId Connectハンドラを追加する："

#: ../../quickstarts/4_external_authentication.rst:89
msgid ""
"And now a user should be able to use the cloud-hosted demo identity "
"provider."
msgstr ""
"これで、ユーザーはクラウドホストデモIDプロバイダを使用できるようになりま"
"した。"

#: ../../quickstarts/4_external_authentication.rst:91
msgid ""
"The quickstart UI auto-provisions external users. As an external user "
"logs in for the first time, a new local user is created, and all the "
"external claims are copied over and associated with the new user. The "
"way you deal with such a situation is completely up to you though. Maybe "
"you want to show some sort of registration UI first. The source code for "
"the default quickstart can be found `here <https://github.com/"
"IdentityServer/IdentityServer4.Quickstart.UI>`_. The controller where "
"auto-provisioning is executed can be found `here <https://github.com/"
"IdentityServer/IdentityServer4.Quickstart.UI/blob/release/Quickstart/"
"Account/AccountController.cs>`_."
msgstr ""
"クイックスタートUIは外部ユーザーを自動的にプロビジョニングします。外部"
"ユーザが初めてログインすると、新しいローカルユーザが作成され、すべての外"
"部クレームが新しいユーザにコピーされて関連付けられます。あなたがこのよう"
"な状況に対処する方法は、あなた次第です。たぶん、ある種の登録UIを最初に表"
"示したいと思うかもしれません。デフォルトのクイックスタートのソースコード"
"は、ここで見つけることができます。自動プロビジョニングが実行されるコント"
"ローラは、ここで見つけることができます。"
