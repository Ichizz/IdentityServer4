# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Brock Allen & Dominick Baier
# This file is distributed under the same license as the IdentityServer4
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
msgid ""
msgstr ""
"Project-Id-Version: IdentityServer4 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-04 15:21+0900\n"
"PO-Revision-Date: 2018-11-17 07:58+0900\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja_JP\n"
"X-Generator: Poedit 2.2\n"

#: ../../quickstarts/7_javascript_client.rst:4
msgid "Adding a JavaScript client"
msgstr "JavaScriptクライアントの追加"

#: ../../quickstarts/7_javascript_client.rst:6
msgid ""
"This quickstart will show how to build a JavaScript client application. The "
"user will login to IdentityServer, invoke the web API with an access token "
"issued by IdentityServer, and logout of IdentityServer."
msgstr ""
"このクイックスタートでは、JavaScriptクライアントアプリケーションを構築する方法を"
"説明します。ユーザーはIdentityServerにログインし、IdentityServerによって発行され"
"たアクセストークンを使用してWeb APIを呼び出し、IdentityServerからログアウトしま"
"す。"

#: ../../quickstarts/7_javascript_client.rst:10
msgid "New Project for the JavaScript client"
msgstr "JavaScriptクライアント用の新しいプロジェクト"

#: ../../quickstarts/7_javascript_client.rst:12
msgid ""
"Create a new project for the JavaScript application. It can simply be an empty "
"web project, or an empty ASP.NET Core application. This quickstart will use an "
"empty ASP.NET Core application."
msgstr ""
"JavaScriptアプリケーション用の新しいプロジェクトを作成します。単純に空のWebプロ"
"ジェクトでも、空のASP.NET Coreアプリケーションでもかまいません。このクイックス"
"タートでは、空のASP.NETコアアプリケーションが使用されます。"

#: ../../quickstarts/7_javascript_client.rst:16
msgid "Create a new ASP.NET Core web application:"
msgstr "新しいASP.NET Core Webアプリケーションを作成します。"

#: ../../quickstarts/7_javascript_client.rst:20
msgid "Choose the \"Empty\" template:"
msgstr "「空」テンプレートを選択します。"

#: ../../quickstarts/7_javascript_client.rst:24
msgid "Click the \"OK\" button to create the project."
msgstr "\"OK\"ボタンをクリックしてプロジェクトを作成します。"

#: ../../quickstarts/7_javascript_client.rst:27
msgid "Modify hosting"
msgstr "ホスティングの変更"

#: ../../quickstarts/7_javascript_client.rst:29
msgid ""
"Modify the hosting (`as described here <0_overview.html#modify-hosting>`_) to "
"run on port 5003."
msgstr "ポート5003で実行するようにホスティングを変更します（ここで説明します）。"

#: ../../quickstarts/7_javascript_client.rst:32
msgid "Add the static file middleware"
msgstr "静的ファイルミドルウェアを追加する"

#: ../../quickstarts/7_javascript_client.rst:34
msgid ""
"Given that this project is designed to mainly run client-side, we need ASP.NET "
"Core to serve up the static HTML and JavaScript files that will make up our "
"application. The static file middleware is designed to do this."
msgstr ""
"このプロジェクトは主にクライアント側で動作するように設計されているため、アプリ"
"ケーションを構成する静的なHTMLファイルとJavaScriptファイルを提供するためにASP."
"NET Coreが必要です。静的ファイルミドルウェアは、これを行うために設計されていま"
"す。"

#: ../../quickstarts/7_javascript_client.rst:37
msgid ""
"Register the static file middleware in `Startup.cs` in the ``Configure`` "
"method::"
msgstr "メソッド内のStartup.csに静的ファイルミドルウェアを登録しますConfigure。"

#: ../../quickstarts/7_javascript_client.rst:45
msgid ""
"This middleware will now serve up static files from the application's `~/"
"wwwroot` folder. This is where we will put our HTML and JavaScript files."
msgstr ""
"このミドルウェアは、アプリケーションの〜/ wwwrootフォルダにある静的ファイルを提"
"供します。ここで、HTMLファイルとJavaScriptファイルを配置します。"

#: ../../quickstarts/7_javascript_client.rst:49
msgid "Reference oidc-client"
msgstr "oidc-client リファレンス"

#: ../../quickstarts/7_javascript_client.rst:51
msgid ""
"In the MVC project, we used a library to handle the OpenID Connect protocol. In "
"this project we need a similar library, except one that works in JavaScript and "
"is designed to run in the browser. The `oidc-client library <https://github.com/"
"IdentityModel/oidc-client-js>`_ is one such library. It is available via `NPM "
"<https://github.com/IdentityModel/oidc-client-js>`_, `Bower <https://bower.io/"
"search/?q=oidc-client>`_,  as well as a `direct download <https://github.com/"
"IdentityModel/oidc-client-js/tree/master/dist>`_ from github."
msgstr ""
"MVCプロジェクトでは、ライブラリを使用してOpenID Connectプロトコルを処理しまし"
"た。このプロジェクトでは、JavaScriptで動作し、ブラウザで動作するように設計されて"
"いるものを除き、同様のライブラリが必要です。oidcクライアントライブラリは、そのよ"
"うなライブラリです。これは、NPM、Bower、githubから直接ダウンロードすることができ"
"ます。"

#: ../../quickstarts/7_javascript_client.rst:56
msgid "**NPM**"
msgstr "NPM"

#: ../../quickstarts/7_javascript_client.rst:58
msgid "If you want to use NPM to download `oidc-client`, then follow these steps:"
msgstr "NPMを使用してoidc-clientをダウンロードする場合は、次の手順を実行します。"

#: ../../quickstarts/7_javascript_client.rst:60
msgid "Add a new NPM package file to your project and name it `package.json`:"
msgstr ""
"新しいNPMパッケージファイルをプロジェクトに追加し、package.jsonという名前を付け"
"ます。"

#: ../../quickstarts/7_javascript_client.rst:64
msgid "In `package.json` add a ``dependency`` to ``oidc-client``::"
msgstr "でpackage.jsonを追加dependencyするにはoidc-client："

#: ../../quickstarts/7_javascript_client.rst:70
msgid ""
"Once you have saved this file, Visual Studio should automatically restore these "
"packages into a folder called `node_modules`:"
msgstr ""
"このファイルを保存したら、Visual Studioは自動的にこれらのパッケージを"
"node_modulesというフォルダに復元します。"

#: ../../quickstarts/7_javascript_client.rst:74
msgid ""
"Locate the file called `oidc-client.js` in the `~/node_modules/oidc-client/"
"dist` folder and copy it into your application's `~/wwwroot` folder. There are "
"more sophisticated ways of copying your NPM packages into `~/wwwroot`, but "
"those techniques are beyond the scope of this quickstart."
msgstr ""
"名前のファイルを探しoidc-client.jsに〜/ node_modules / oidc-クライアント/ distの"
"のフォルダを、アプリケーションの中にそれをコピーし、〜/のwwwrootフォルダ。〜/ "
"wwwrootに NPMパッケージをコピーするもっと洗練された方法がありますが、これらのテ"
"クニックはこのクイックスタートの対象外です。"

#: ../../quickstarts/7_javascript_client.rst:78
msgid "Add your HTML and JavaScript files"
msgstr "HTMLファイルとJavaScriptファイルを追加する"

#: ../../quickstarts/7_javascript_client.rst:80
msgid ""
"Next is to add your HTML and JavaScript files to `~/wwwroot`. We will have two "
"HTML files and one application-specific JavaScript file (in addition to the "
"`oidc-client.js` library). In `~/wwwroot`, add a HTML file named `index.html` "
"and `callback.html`, and add a JavaScript file called `app.js`."
msgstr ""
"次に、HTMLファイルとJavaScriptファイルを〜/ wwwrootに追加します。2つのHTMLファイ"
"ルと1つのアプリケーション固有のJavaScriptファイル（oidc-client.jsライブラリに加"
"えて）があります。では〜/ wwwrootに、名前のHTMLファイルを追加したindex.htmlと"
"callback.htmlを、と呼ばれるJavaScriptファイルを追加app.jsを。"

#: ../../quickstarts/7_javascript_client.rst:84
msgid "**index.html**"
msgstr "**index.html**"

#: ../../quickstarts/7_javascript_client.rst:86
msgid ""
"This will be the main page in our application. It will simply contain the HTML "
"for the buttons for the user to login, logout, and call the web API. It will "
"also contain the ``<script>`` tags to include our two JavaScript files. It will "
"also contain a ``<pre>`` used for showing messages to the user."
msgstr ""
"これはアプリケーションのメインページになります。ユーザーがログイン、ログアウト、"
"およびWeb APIの呼び出しを行うためのボタン用のHTMLが含まれています。また"
"<script>、2つのJavaScriptファイルを含むタグも含まれています。また<pre>、ユーザー"
"にメッセージを表示するために使用されます。"

#: ../../quickstarts/7_javascript_client.rst:91
msgid "It should look like this::"
msgstr "これは次のようになります。"

#: ../../quickstarts/7_javascript_client.rst:111
msgid "**app.js**"
msgstr "**app.js**"

#: ../../quickstarts/7_javascript_client.rst:113
msgid ""
"This will contain the main code for our application. The first thing is to add "
"a helper function to log messages to the ``<pre>``::"
msgstr ""
"これには、アプリケーションのメインコードが含まれます。まず、ヘルパ関数を追加して"
"メッセージをログに記録します<pre>。"

#: ../../quickstarts/7_javascript_client.rst:130
msgid "Next, add code to register \"click\" event handlers to the three buttons::"
msgstr ""
"次に、「クリック」イベントハンドラを3つのボタンに登録するコードを追加します。"

#: ../../quickstarts/7_javascript_client.rst:136
msgid ""
"Next, we can use the ``UserManager`` class in the `oidc-client` library to "
"manage the OpenID Connect protocol. It requires similar configuration that was "
"necessary in the MVC Client (albeit with different values). Add this code to "
"configure and instantiate the ``UserManager``::"
msgstr ""
"次に、oidc-clientライブラリのUserManagerクラスを使用して、OpenID Connectプロトコ"
"ルを管理できます。これには、MVCクライアントで必要とされたのと同じ設定が必要です"
"（値は異なりますが）。構成およびインスタンス化するには、このコードを追加します："
"UserManager"

#: ../../quickstarts/7_javascript_client.rst:150
msgid ""
"Next, the ``UserManager`` provides a ``getUser`` API to know if the user is "
"logged into the JavaScript application. It uses a JavaScript ``Promise`` to "
"return the results asynchronously. The returned ``User`` object has a "
"``profile`` property which contains the claims for the user. Add this code to "
"detect if the user is logged into the JavaScript application::"
msgstr ""
"次に、ユーザーがJavaScriptアプリケーションにログインしているかどうかを知るAPIを"
"UserManager提供しgetUserます。JavaScript Promiseを使用して結果を非同期的に返しま"
"す。返されるUserオブジェクトにはprofile、ユーザーの要求を含むプロパティがありま"
"す。このコードを追加して、ユーザーがJavaScriptアプリケーションにログインしている"
"かどうかを検出します。"

#: ../../quickstarts/7_javascript_client.rst:164
msgid ""
"Next, we want to implement the ``login``, ``api``, and ``logout`` functions. "
"The ``UserManager`` provides a ``signinRedirect`` to log the user in, and a "
"``signoutRedirect`` to log the user out. The ``User`` object that we obtained "
"in the above code also has an ``access_token`` property which can be used to "
"authenticate with a web API. The ``access_token`` will be passed to the web API "
"via the `Authorization` header with the `Bearer` scheme. Add this code to "
"implement those three functions in our application::"
msgstr ""
"次に、我々は実装したいlogin、apiとlogout機能を。これUserManagerは"
"signinRedirect、ユーザsignoutRedirectをログインさせ、ユーザをログアウトさせるた"
"めのものです。User我々は上記のコードで得られたオブジェクトもありaccess_token、"
"ウェブAPIの認証に使用することができますプロパティを。これaccess_tokenは、ベアラ"
"方式のAuthorizationヘッダーを介してWeb APIに渡されます。このコードを追加して、ア"
"プリケーションでこれらの3つの機能を実装します。"

#: ../../quickstarts/7_javascript_client.rst:192
msgid ""
"See: `Protecting an API using Client Credentials <http://docs.identityserver.io/"
"en/release/quickstarts/1_client_credentials.html>` for information on how to "
"create the api used in the code above."
msgstr ""

#: ../../quickstarts/7_javascript_client.rst:194
msgid "**callback.html**"
msgstr ""

#: ../../quickstarts/7_javascript_client.rst:196
msgid ""
"This HTML file is the designated ``redirect_uri`` page once the user has logged "
"into IdentityServer. It will complete the OpenID Connect protocol sign-in "
"handshake with IdentityServer. The code for this is all provided by the "
"``UserManager`` class we used earlier. Once the sign-in is complete, we can "
"then redirect the user back to the main `index.html` page. Add this code to "
"complete the signin process::"
msgstr ""
"このHTMLファイルは、redirect_uriユーザーがIdentityServerにログインすると指定され"
"たページです。それは、IdentityServerとのOpenID Connectプロトコルサインインハンド"
"シェイクを完了します。これのためのコードは、UserManager以前使用したクラスによっ"
"てすべて提供されています。ログインが完了したら、ユーザーをメインのindex.htmlペー"
"ジにリダイレクトすることができます。サインインプロセスを完了するためにこのコード"
"を追加してください："

#: ../../quickstarts/7_javascript_client.rst:221
msgid "Add a client registration to IdentityServer for the JavaScript client"
msgstr "JavaScriptクライアント用のIdentityServerにクライアント登録を追加する"

#: ../../quickstarts/7_javascript_client.rst:223
msgid ""
"Now that the client application is ready to go, we need to define a "
"configuration entry in IdentityServer for this new JavaScript client. In the "
"IdentityServer project locate the client configuration (in `Config.cs`). Add a "
"new `Client` to the list for our new JavaScript application. It should have the "
"configuration listed below::"
msgstr ""
"クライアントアプリケーションがすぐに使えるようになったので、この新しいJavaScript"
"クライアント用にIdentityServerに設定エントリを定義する必要があります。"
"IdentityServerプロジェクトで、クライアント構成（Config.cs内）を探します。新しい"
"JavaScriptアプリケーションのリストに新しいクライアントを追加します。次のような構"
"成にする必要があります。"

#: ../../quickstarts/7_javascript_client.rst:249
msgid "Allowing Ajax calls to the Web API with CORS"
msgstr "CORSでWeb APIへのAjax呼び出しを許可する"

#: ../../quickstarts/7_javascript_client.rst:251
msgid ""
"One last bit of configuration that is necessary is to configure CORS in the web "
"API project. This will allow Ajax calls to be made from `http://localhost:5003` "
"to `http://localhost:5001`."
msgstr ""
"必要な設定の最後の1つは、Web APIプロジェクトでCORSを設定することです。これによ"
"り、http：// localhost：5003からhttp：// localhost：5001へのAjax呼び出しが可能に"
"なります。"

#: ../../quickstarts/7_javascript_client.rst:254
msgid "**Configure CORS**"
msgstr ""

#: ../../quickstarts/7_javascript_client.rst:256
msgid ""
"Add the CORS services to the dependency injection system in "
"``ConfigureServices`` in `Startup.cs`::"
msgstr "依存性注入システムにCORSサービスを追加ConfigureServicesでStartup.cs："

#: ../../quickstarts/7_javascript_client.rst:285
msgid "Add the CORS middleware to the pipeline in ``Configure``::"
msgstr "CORSミドルウェアをパイプラインに追加しConfigureます。"

#: ../../quickstarts/7_javascript_client.rst:297
msgid "Run the JavaScript application"
msgstr "JavaScriptアプリケーションを実行する"

#: ../../quickstarts/7_javascript_client.rst:299
msgid "Now you should be able to run the JavaScript client application:"
msgstr "これで、JavaScriptクライアントアプリケーションを実行できるはずです。"

#: ../../quickstarts/7_javascript_client.rst:303
msgid ""
"Click the \"Login\" button to sign the user in. Once the user is returned back "
"to the JavaScript application, you should see their profile information:"
msgstr ""
"ユーザーにサインインするには、[ログイン]ボタンをクリックします。ユーザーが"
"JavaScriptアプリケーションに戻ったら、プロフィール情報が表示されます。"

#: ../../quickstarts/7_javascript_client.rst:308
msgid "And click the \"API\" button to invoke the web API:"
msgstr "\"API\"ボタンをクリックしてWeb APIを呼び出します："

#: ../../quickstarts/7_javascript_client.rst:312
msgid "And finally click \"Logout\" to sign the user out."
msgstr "最後に「ログアウト」をクリックしてユーザーにサインアウトします。"

#: ../../quickstarts/7_javascript_client.rst:316
msgid ""
"You now have the start of a JavaScript client application that uses "
"IdentityServer for sign-in, sign-out, and authenticating calls to web APIs."
msgstr ""
"サインイン、ログアウト、およびWeb APIへの呼び出しの認証にIdentityServerを使用す"
"るJavaScriptクライアントアプリケーションが開始されました。"
