# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Brock Allen & Dominick Baier
# This file is distributed under the same license as the IdentityServer4
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IdentityServer4 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-04 15:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../quickstarts/1_client_credentials.rst:4
msgid "Protecting an API using Client Credentials"
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:6
msgid ""
"This quickstart presents the most basic scenario for protecting APIs "
"using IdentityServer."
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:8
msgid ""
"In this scenario we will define an API and a client that wants to access "
"it. The client will request an access token at IdentityServer and use it "
"to gain access to the API."
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:12
msgid "Defining the API"
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:13
msgid ""
"Scopes define the resources in your system that you want to protect, e.g."
" APIs."
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:15
msgid ""
"Since we are using the in-memory configuration for this walkthrough - all"
" you need to do to add an API, is to create an object of type "
"``ApiResource`` and set the appropriate properties."
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:18
msgid ""
"Add a file (e.g. ``Config.cs``) into your project and add the following "
"code::"
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:29
msgid "Defining the client"
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:30
msgid "The next step is to define a client that can access this API."
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:32
msgid ""
"For this scenario, the client will not have an interactive user, and will"
" authenticate using the so called client secret with IdentityServer. Add "
"the following code to your `Config.cs` file::"
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:60
msgid "Configure IdentityServer"
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:61
msgid ""
"To configure IdentityServer to use your scopes and client definition, you"
" need to add code to the ``ConfigureServices`` method. You can use "
"convenient extension methods for that - under the covers these add the "
"relevant stores and data into the DI system::"
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:75
msgid ""
"That's it - if you run the server and navigate the browser to "
"``http://localhost:5000/.well-known/openid-configuration``, you should "
"see the so-called discovery document. This will be used by your clients "
"and APIs to download the necessary configuration data."
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:83
msgid "Adding an API"
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:84
msgid "Next, add an API to your solution."
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:86
msgid ""
"You can use the ASP.NET Core Web API template. Again, we recommend you "
"take control over the ports and use the same technique as you used to "
"configure Kestrel and the launch profile as before. This walkthrough "
"assumes you have configured your API to run on ``http://localhost:5001``."
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:91
msgid "**The controller**"
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:93
msgid "Add a new controller to your API project::"
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:106
msgid ""
"This controller will be used later to test the authorization requirement,"
" as well as visualize the claims identity through the eyes of the API."
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:109
msgid "**Configuration**"
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:111
msgid ""
"The last step is to add the authentication services to DI and the "
"authentication middleware to the pipeline. These will:"
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:114
msgid ""
"validate the incoming token to make sure it is coming from a trusted "
"issuer"
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:115
msgid "validate that the token is valid to be used with this api (aka scope)"
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:117
msgid ""
"Add the `IdentityServer4.AccessTokenValidation` NuGet package to your "
"project."
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:121
msgid "Update `Startup` to look like this::"
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:150
msgid ""
"``AddAuthentication`` adds the authentication services to DI and "
"configures ``\"Bearer\"`` as the default scheme. "
"``AddIdentityServerAuthentication`` adds the IdentityServer access token "
"validation handler into DI for use by the authentication services. "
"``UseAuthentication`` adds the authentication middleware to the pipeline "
"so authentication will be performed automatically on every call into the "
"host."
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:154
msgid ""
"If you use the browser to navigate to the controller "
"(``http://localhost:5001/identity``), you should get a 401 status code in"
" return. This means your API requires a credential."
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:157
msgid "That's it, the API is now protected by IdentityServer."
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:160
msgid "Creating the client"
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:161
msgid ""
"The last step is to write a client that requests an access token, and "
"then uses this token to access the API. For that, add a console project "
"to your solution (see full code `here "
"<https://github.com/IdentityServer/IdentityServer4.Samples/blob/release/Quickstarts/1_ClientCredentials/src/Client/Program.cs>`_)."
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:164
msgid ""
"The token endpoint at IdentityServer implements the OAuth 2.0 protocol, "
"and you could use raw HTTP to access it. However, we have a client "
"library called IdentityModel, that encapsulates the protocol interaction "
"in an easy to use API."
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:168
msgid "Add the `IdentityModel` NuGet package to your application."
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:172
msgid ""
"IdentityModel includes a client library to use with the discovery "
"endpoint. This way you only need to know the base-address of "
"IdentityServer - the actual endpoint addresses can be read from the "
"metadata::"
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:184
msgid ""
"Next you can use the ``TokenClient`` class to request the token. To "
"create an instance you need to pass in the token endpoint address, client"
" id and secret."
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:187
msgid ""
"Next you can use the ``RequestClientCredentialsAsync`` method to request "
"a token for your API::"
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:202
msgid ""
"Copy and paste the access token from the console to `jwt.io "
"<https://jwt.io>`_ to inspect the raw token."
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:204
msgid "The last step is now to call the API."
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:206
msgid ""
"To send the access token to the API you typically use the HTTP "
"Authorization header. This is done using the ``SetBearerToken`` extension"
" method::"
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:224
msgid "The output should look like this:"
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:228
msgid ""
"By default an access token will contain claims about the scope, lifetime "
"(nbf and exp), the client ID (client_id) and the issuer name (iss)."
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:231
msgid "Further experiments"
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:233
msgid "This walkthrough focused on the success path so far"
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:235
msgid "client was able to request token"
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:236
msgid "client could use the token to access the API"
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:238
msgid "You can now try to provoke errors to learn how the system behaves, e.g."
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:240
msgid "try to connect to IdentityServer when it is not running (unavailable)"
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:241
msgid "try to use an invalid client id or secret to request the token"
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:242
msgid "try to ask for an invalid scope during the token request"
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:243
msgid "try to call the API when it is not running (unavailable)"
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:244
msgid "don't send the token to the API"
msgstr ""

#: ../../quickstarts/1_client_credentials.rst:245
msgid "configure the API to require a different scope than the one in the token"
msgstr ""

