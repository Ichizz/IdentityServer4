# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Brock Allen & Dominick Baier
# This file is distributed under the same license as the IdentityServer4
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IdentityServer4 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-04 15:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../quickstarts/5_hybrid_and_api_access.rst:4
msgid "Switching to Hybrid Flow and adding API Access back"
msgstr ""

#: ../../quickstarts/5_hybrid_and_api_access.rst:6
msgid ""
"In the previous quickstarts we explored both API access and user "
"authentication. Now we want to bring the two parts together."
msgstr ""

#: ../../quickstarts/5_hybrid_and_api_access.rst:9
msgid ""
"The beauty of the OpenID Connect & OAuth 2.0 combination is, that you can"
" achieve both with a single protocol and a single exchange with the token"
" service."
msgstr ""

#: ../../quickstarts/5_hybrid_and_api_access.rst:12
msgid ""
"In the previous quickstart we used the OpenID Connect implicit flow. In "
"the implicit flow all tokens are transmitted via the browser, which is "
"totally fine for the identity token. Now we also want to request an "
"access token."
msgstr ""

#: ../../quickstarts/5_hybrid_and_api_access.rst:16
msgid ""
"Access tokens are a bit more sensitive than identity tokens, and we don't"
" want to expose them to the \"outside\" world if not needed. OpenID "
"Connect includes a flow called \"Hybrid Flow\" which gives us the best of"
" both worlds, the identity token is transmitted via the browser channel, "
"so the client can validate it before doing any more work. And if "
"validation is successful, the client opens a back-channel to the token "
"service to retrieve the access token."
msgstr ""

#: ../../quickstarts/5_hybrid_and_api_access.rst:22
msgid "Modifying the client configuration"
msgstr ""

#: ../../quickstarts/5_hybrid_and_api_access.rst:23
msgid ""
"There are not many modifications necessary. First we want to allow the "
"client to use the hybrid flow, in addition we also want the client to "
"allow doing server to server API calls which are not in the context of a "
"user (this is very similar to our client credentials quickstart). This is"
" expressed using the ``AllowedGrantTypes`` property."
msgstr ""

#: ../../quickstarts/5_hybrid_and_api_access.rst:27
msgid ""
"Next we need to add a client secret. This will be used to retrieve the "
"access token on the back channel."
msgstr ""

#: ../../quickstarts/5_hybrid_and_api_access.rst:29
msgid ""
"And finally, we also give the client access to the ``offline_access`` "
"scope - this allows requesting refresh tokens for long lived API access::"
msgstr ""

#: ../../quickstarts/5_hybrid_and_api_access.rst:56
msgid "Modifying the MVC client"
msgstr ""

#: ../../quickstarts/5_hybrid_and_api_access.rst:57
msgid ""
"The modifications at the MVC client are also minimal - the ASP.NET Core "
"OpenID Connect handler has built-in support for the hybrid flow, so we "
"only need to change some configuration values."
msgstr ""

#: ../../quickstarts/5_hybrid_and_api_access.rst:60
msgid ""
"We configure the ``ClientSecret`` to match the secret at IdentityServer. "
"Add the ``offline_access`` and ``api1`` scopes, and set the "
"``ResponseType`` to ``code id_token`` (which basically means \"use hybrid"
" flow\"). To keep the ``website`` claim in our mvc client identity we "
"need to explicitly map the claim using ClaimActions."
msgstr ""

#: ../../quickstarts/5_hybrid_and_api_access.rst:85
msgid ""
"When you run the MVC client, there will be no big differences, besides "
"that the consent screen now asks you for the additional API and offline "
"access scope."
msgstr ""

#: ../../quickstarts/5_hybrid_and_api_access.rst:89
msgid "Using the access token"
msgstr ""

#: ../../quickstarts/5_hybrid_and_api_access.rst:90
msgid ""
"The OpenID Connect middleware saves the tokens (identity, access and "
"refresh in our case) automatically for you. That's what the "
"``SaveTokens`` setting does."
msgstr ""

#: ../../quickstarts/5_hybrid_and_api_access.rst:93
msgid ""
"Technically the tokens are stored inside the properties section of the "
"cookie. The easiest way to access them is by using extension methods from"
" the ``Microsoft.AspNetCore.Authentication`` namespace."
msgstr ""

#: ../../quickstarts/5_hybrid_and_api_access.rst:96
msgid "For example on your claims view::"
msgstr ""

#: ../../quickstarts/5_hybrid_and_api_access.rst:104
msgid ""
"For accessing the API using the access token, all you need to do is "
"retrieve the token, and set it on your *HttpClient*::"
msgstr ""

